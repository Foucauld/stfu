Tout d'abord, on remarque qu'il ne s'agit pas de faire un google docs, mais plutôt quelque chose ressemblant à un gestionnaire de version, par exemple Git.
Ceux qui se sont pointés à la formation de Joey sur le sujet et ceux qui connaissent déjà Git (ou équivalent) ont immédiatement remarqué qu'un des principaux problèmes de ce projet réside dans les conflits de version. Pour les autres: google ->"git conflicts'.
Et parce que je suis sympa un exemple: soient Alice et Bob travaillant sur un document en version 1. Alice récupère le document auprès du serveur commun, Bob fait de même. Alice écrit ensuite deux lignes dans le document récupéré, et met à jour la version du document sur le serveur (V2 donc). Bob supprime quant à lui une ligne du document, mais n'a pas conscience qu'Alice en a ajouté deux autres. Que se passe-t-il lorsque Bob tente de mettre à jour la V1 du doc alors que sur le serveur commun, celui-ci est en V2 ? Git sait gérer ça.

Pour ce qui est de l'applicatif (la partie éditeur de texte), Qt (prononcer cute comme en anglais) possède une classe qui fait tout ce dont vous avez besoin au niveau d'un éditeur de texte. Il possède aussi une classe toute faite permettant d'enregistrer des données (au hasard le contenu de votre document, mise en forme comprise) dans un format standard - je ne me rappelle plus lequel.
En bref, avec ces deux classes Qt vous avez fait votre projet.
Qt est très bien documenté, et à mon sens vous prendrez moins de temps à l'apprendre et à utiliser ces deux classes qu'à essayer de faire l'éditeur de texte en reprenant le projet Caml 1A ma promo, d'autant plus que Qt, lui, présente une interface graphique ^^
On apprend à se servir de Qt à l'ENSIIE au S4, en LOA; par conséquent, environ 1/4 des 2A et des 3A pourront vous aider à le comprendre et vous filer leurs TP si besoin.

Pour revenir sur le problème de conflits de versions, j'utilise personnellement meld: il est parfaitement adapté au débutant que je suis, il suffit de le lancer pour comprendre comment s'en servir, et ainsi régler les conflits de versions.
Une fois que vous l'aurez vu, vous comprendrez qu'il est très similaire à la partie applicative évoquée précédemment; vous pourrez donc en reprendre les sources ^^

On voit donc que Qt peut entièrement gérer la partie applicative de votre projet, alors que Git s'occupera de la gestion des versions de vos documents ainsi que de la partie réseau.

Je vous conseille donc de faire un programme Qt pour la partie applicative, utiliser Git pour la partie réseau et gestion de versions, et de faire une interface en bash (ou le langage de script que vous aimez) afin d'établir une surcouche simple et claire à votre architecture:
-une commande new serveur
-une commande new doc <nom du doc>
-une commande edit <doc>
-une commande save <doc> (sauvegardant le document et faisant un git commit)
-une commande push <serveur> <nom du doc> (mettre le fichier sur le serveur)
-une commande pull <serveur> <nom du doc> (récupérer le fichier depuis le serveur)
-une commande solve_conflict (lancant votre "meld")

Les commandes précédentes peuvent d'ailleurs être lancées depuis Qt (très facile à mettre en place) et correspondront à un appel en ligne de commandes aux commandes précédentes.
